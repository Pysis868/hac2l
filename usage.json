[
  {
    "name": {
      "long": "dev",
      "short": "d"
    },
    "description": "Decrypt with development keys instead of retail."
  }, {
    "name": {
      "long": "verify",
      "short": "y"
    },
    "description": "Verify hashes and signatures."
  }, {
    "name": {
      "long": "raw",
      "short": "r"
    },
    "description": "Keep raw data, don’t unpack."
  }, {
    "name": {
      "long": "enablehash",
      "short": "h"
    },
    "description": "Doesn’t currently do anything, but there because `hactoolnet` has this as an option."
  }, {
    "name": {
      "long": "disablekeywarns"
    },
    "description": "Disables warning output when loading external keys."
  }, {
    "name": {
      "long": "onlyupdated"
    },
    "description": "Ignore non-updated files in update partitions."
  }, {
    "name": {
      "long": "keyset",
      "short": "k"
    },
    "description": "Load keys from a different external file."
  }, {
    "name": {
      "long": "titlekeys"
    },
    "description": "Set title key for Rights ID crypto titles."
  }, {
    "name": {
      "long": "consolekeys"
    },
    "description": "Doesn’t currently do anything, but there because `hactoolnet` has this as an option."
  }, {
    "name": {
      "long": "section0"
    },
    "description": "Specify Section 0 file path."
  }, {
    "name": {
      "long": "section1"
    },
    "description": "Specify Section 1 file path."
  }, {
    "name": {
      "long": "section2"
    },
    "description": "Specify Section 2 file path."
  }, {
    "name": {
      "long": "section3"
    },
    "description": "Specify Section 3 file path."
  }, {
    "name": {
      "long": "section0dir"
    },
    "description": "Specify Section 0 directory path."
  }, {
    "name": {
      "long": "section1dir"
    },
    "description": "Specify Section 1 directory path."
  }, {
    "name": {
      "long": "section2dir"
    },
    "description": "Specify Section 2 directory path."
  }, {
    "name": {
      "long": "section3dir"
    },
    "description": "Specify Section 3 directory path."
  }, {
    "name": {
      "long": "header"
    },
    "categories": [ "nca" ],
    "description": "Extracts decrypted NCA header and writes it to a file."
  }, {
    "name": {
      "long": "exefs"
    },
    "description": "Specify ExeFS file extract path. Overrides appropriate section file path."
  }, {
    "name": {
      "long": "romfs"
    },
    "description": "Specify RomFS file path. Overrides appropriate section file path."
  }, {
    "name": {
      "long": "exefsdir"
    },
    "description": "Specify ExeFS directory path. Overrides appropriate section directory path."
  }, {
    "name": {
      "long": "romfsdir"
    },
    "description": "Specify RomFS directory path. Overrides appropriate section directory path."
  }, {
    "name": {
      "long": "outdir"
    },
    "description": "Specify extraction output folder, mainly useful for file types like PFS or XCI archives that hold further archives."
  }, {
    "name": {
      "long": "outfile"
    },
    "description": "Specify extraction output file"
  }, {
    "name": {
      "long": "plaintext"
    },
    "categories": [ "nca" ],
    "description": "Specify file output path for saving a decrypted copy of the NCA."
  }, {
    "name": {
      "long": "ciphertext"
    },
    "description": "Doesn’t currently do anything, but there because `hactoolnet` has this as an option."
  }, {
    "name": {
      "long": "json"
    },
    "categories": [ "kip", "npdm" ],
    "description": "Specify file path for saving JSON representation of `npdm` and `kip` files."
  }, {
    "name": {
      "long": "rootdir"
    },
    "categories": [ "xci" ],
    "description": "Specify XCI root HFS0 directory path."
  }, {
    "name": {
      "long": "securedir"
    },
    "categories": [ "xci" ],
    "description": "Specify XCI secure HFS0 directory path."
  }, {
    "name": {
      "long": "normaldir"
    },
    "categories": [ "xci" ],
    "description": "Specify XCI normal HFS0 directory path."
  }, {
    "name": {
      "long": "updatedir"
    },
    "categories": [ "xci" ],
    "description": "Specify XCI update HFS0 directory path."
  }, {
    "name": {
      "long": "logodir"
    },
    "categories": [ "xci" ],
    "description": "Specify XCI logo HFS0 directory path."
  }, {
    "name": {
      "long": "basenca"
    },
    "categories": [ "nca" ],
    "description": "Set Base NCA to use with update partitions."
  }, {
    "name": {
      "long": "basexci"
    },
    "categories": [ "xci" ],
    "description": "Set Base XCI to use with update partitions."
  }, {
    "name": {
      "long": "basepfs"
    },
    "description": "Set Base PFS archive to use with update partitions."
  }, {
    "name": {
      "long": "basensp"
    },
    "description": "Set Base PFS archive to use with update partitions."
  }, {
    "name": {
      "long": "baseappfs"
    },
    "description": [
      "Set Base Application Directory to use with update partitions.",
      " - Not positive, but pretty sure."
    ]
  }, {
    "name": {
      "long": "listromfs"
    },
    "description": "List files in RomFS."
  }, {
    "name": {
      "long": "listupdate"
    },
    "description": "List the contents of the cartridge’s update partition."
  }, {
    "name": {
      "long": "appindex"
    },
    "description": [
      "Select a game by index (if the game/title you want isn’t index 0)`",
      "Defaults to 0 if option is not specified"
    ]
  }, {
    "name": {
      "long": "programindex"
    },
    "description": [
      "Specify target program via content’s program index.",
      "**Scires Explanation in RS:**",
      " > If you want e.g. a game with a program index like “Super Mario 3D All-Stars”"
    ]
  }, {
    "name": {
      "long": "appversion"
    },
    "description": [
      "Extract data from only available game data with given HEX version number (For example, `0` for only the base title, `0x10000` for v65536, etc)",
      " > App version is a selector if there are multiple updates in an app FS",
      "**Scires Explanation in RS:**",
      " > `--appversion=0` works to only use the base when base + many updates are present in the appfs, and `--appversion=0xwhatever` also works to select a specific update (if you don’t want the latest found)"
    ]
  }, {
    "name": {
      "long": "updatedsince"
    },
    "description": [
      "Only list game data that has been updates since specified update number.",
      "Only does something when `--onlyupdated` is also used",
      "Makes `--onlyupdated` apply to the data in update which was updated since the passed id",
      "> you can add `--updatedsince=n` to only list the stuff updated since patch generation"
    ]
  }
]
